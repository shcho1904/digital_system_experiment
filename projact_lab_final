module project_lab(clk, rst, num1, num2, pos);
	input clk,rst;
	input [3:0] num1,num2;
	output reg [6:0] pos;
	reg [3:0] result;
	wire[9:0] bcd_number;
	wire[6:0] temp_pos;
	reg [16:0] arr;
	integer count,count_b;
	
	binary_to_BCD U1(result[3], result[2], result[1], result[0], bcd_number[9],bcd_number[8],bcd_number[7],bcd_number[6],bcd_number[5],bcd_number[4],bcd_number[3],bcd_number[2],bcd_number[1],bcd_number[0]);
	SEG7 U2(bcd_number[3],bcd_number[2],bcd_number[1],bcd_number[0], temp_pos);
	
	initial begin
		result = 4'b0;
		pos = 7'b0;
	end
	
	always@(posedge clk) begin
		if(rst) begin
			result = 4'b0;
			pos = 7'b0;
			if(num1 > num2)
				result = num1;
			else
				result = num2;
		end
		else begin
			pos = temp_pos;
		end
	end
endmodule	

module SEG7(a,b,c,d, out);
input a,b,c,d;
output [6:0] out;
reg [6:0] P;

always @(a,b,c,d)
	begin 
		case({a,b,c,d})
			4'b0000: P <= 7'b1111110;
			4'b0001: P <= 7'b0110000;
			4'b0010: P <= 7'b1101101;
			4'b0011: P <= 7'b1111001;
			4'b0100: P <= 7'b0110011;
			4'b0101: P <= 7'b1011011;
			4'b0110: P <= 7'b1011111;
			4'b0111: P <= 7'b1110000;
			4'b1000: P <= 7'b1111111;
			4'b1001: P <= 7'b1110011;
			default: P <= 7'b0000000;
		endcase 
	end
	assign out = P;
endmodule 

module binary_to_BCD(
		B3,B2,B1,B0, 
		P9,P8,P7,P6,P5,P4,P3,P2,P1,P0
		);
		
input B3,B2,B1,B0;
output P9,P8,P7,P6,P5,P4,P3,P2,P1,P0;
wire T10,T9,T8,T7,T6,T5,T4,T3,T2,T1,T0;

assign P0 = B0;
linedecoder C1(0,0,0,B3,		T3,T2,T1,T0);
linedecoder C2(T2,T1,T0,B2,	T7,T6,T5,T4);
linedecoder C3(0,0,0,T3,		P9,T10,T9,T8);
linedecoder C4(T6,T5,T4,B1,	P4,P3,P2,P1);
linedecoder C5(T10,T9,T8,T7,	P8,P7,P6,P5);

endmodule

module linedecoder(
	A3,A2,A1,A0,
	S3,S2,S1,S0
);

input A3,A2,A1,A0;
output S3,S2,S1,S0;

reg [3:0] out; 

always @(A3,A2,A1,A0)
begin
case({A3,A2,A1,A0})
4'b0000 : out <= 4'b0000; //0
4'b0001 : out <= 4'b0001; //1
4'b0010 : out <= 4'b0010; //2
4'b0011 : out <= 4'b0011; //3
4'b0100 : out <= 4'b0100; //4
4'b0101 : out <= 4'b1000; //5
4'b0110 : out <= 4'b1001; //6
4'b0111 : out <= 4'b1010; //7
4'b1000 : out <= 4'b1011; //8
4'b1001 : out <= 4'b1100; //9
default : out <= 4'b0000; //NULL
endcase 
end

assign {S3,S2,S1,S0} = out;

endmodule
